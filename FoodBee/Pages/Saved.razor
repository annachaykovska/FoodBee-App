@page "/saved"

@using FoodBee.Components
@using FoodBee.Models
@using FoodBee.Services

@inject NavigationManager Navigator
@inject IFoodBeeService<Vendor> Vendors
@inject IFoodBeeService<Product> Products
@inject ISearchService SearchService

<div class="container">
    <div class="input-group" style="margin-bottom: 10px">
        <button type="button" class="btn btn-outline-dark" @onclick="@(e => Navigator.NavigateTo(Navigator.BaseUri))"><i class="fa-solid fa-angle-left"></i></button>

        <div style="margin-left: 10px; flex: 1;">
            <h3>Saved</h3>
        </div>

        <div class="dropdown" style="margin-left: 5px;">
            <button class="btn btn-warning dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-expanded="false">
                <i class="fa-solid @ShowingIcon"></i>
            </button>
            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton">
                <a class="dropdown-item @ProductsActive" @onclick="(e => SearchService.ShowVendors = false)">Show Products</a>
                <a class="dropdown-item @VendorsActive" @onclick="(e => SearchService.ShowVendors = true)">Show Vendors</a>
            </div>
        </div>
    </div>
    
    @if (SearchService.ShowVendors)
    {
        <VendorList Vendors="@BookmarkedVendors"/>
    }
    else
    {
        <ProductList Products="@BookmarkedProducts"/>
    }

</div>

@code {

    private List<Vendor> BookmarkedVendors => Vendors.GetAll().Where(v => Vendors.IsActive(v.Name)).ToList();
    private List<Product> BookmarkedProducts => Products.GetAll().Where(p => Products.IsActive(p.Name)).ToList();

    private string ProductsActive => SearchService.ShowVendors ? null : "active";
    private string VendorsActive => SearchService.ShowVendors ? "active" : null;

    private string ShowingIcon => SearchService.ShowVendors ? "fa-map-location-dot" : "fa-bag-shopping";

}
