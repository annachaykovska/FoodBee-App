@page "/search"

@using FoodBee.Models
@using FoodBee.Services
@using FoodBee.Components
@using System.Reflection

@inject NavigationManager Navigator
@inject IFoodBeeService<Filter> Filters
@inject IFoodBeeService<Vendor> Vendors
@inject IFoodBeeService<Product> Products


<div class="container" style="position: relative">

    @*Top search/filter bar*@
    <div style="position: fixed; z-index: 4; background: whitesmoke; width: 92%">
        <div class="input-group" style="margin-bottom: 5px">
            
            <button type="button" class="btn btn-outline-dark" @onclick="@(e => Navigator.NavigateTo(Navigator.BaseUri))"><i class="fa-solid fa-angle-left"></i></button>
            
            <input @bind="QueryString" @bind:event="oninput" style="margin: 0 5px;" type="search" class="form-control rounded" placeholder="Search" aria-label="Search" aria-describedby="search-addon" />

            <div class="dropdown">
                <button class="btn btn-warning dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-expanded="false">
                    <i class="fa-solid fa-arrow-down-wide-short"></i>
                </button>
                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton">
                    <a class="dropdown-item @ActiveSortClass(SortPredicate.Cheapest)" @onclick="(e => SortBy = SortPredicate.Cheapest)">Cheapest</a>
                    <a class="dropdown-item @ActiveSortClass(SortPredicate.Closest)" @onclick="(e => SortBy = SortPredicate.Closest)">Closest</a>
                    <a class="dropdown-item @ActiveSortClass(SortPredicate.Newest)" @onclick="(e => SortBy = SortPredicate.Newest)">Newest</a>
                </div>
            </div>

            <div class="dropdown" style="margin-left: 5px;">
                <button class="btn btn-warning dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-expanded="false">
                    <i class="fa-solid @ShowingIcon"></i>
                </button>
                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton">
                    <a class="dropdown-item @ProductsActive" @onclick="(e => ShowVendors = false)">Show Products</a>
                    <a class="dropdown-item @VendorsActive" @onclick="(e => ShowVendors = true)">Show Vendors</a>
                </div>
            </div>

        </div>
        @*Filters accordion*@
        <div class="accordion" id="accordionExample">
            <div class="card">
                <div class="card-header" id="headingOne">
                    <h2 class="mb-0">
                        <button class="btn btn-block text-left" type="button" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne" @onclick="ToggleFiltersTray">
                            @Filters.GetNumActive() Filters
                            <span style="float: right"><i class="fa-solid fa-angle-down @RotateIconClass"></i></span>
                        </button>
                    </h2>
                </div>

                <div id="collapseOne" class="collapse" aria-labelledby="headingOne" data-parent="#accordionExample">
                    <div class="card-body">
                        @if (Filters.GetActive().Any())
                        {
                            <div style="width: 100%">
                                <small>Active</small>
                                <button style="float: right" type="button" class="btn btn-outline-danger btn-sm" @onclick="@(e => Filters.ClearActive())">Clear Filters</button>

                            </div>
                        
                            <br />    
                            @foreach(string filter in Filters.GetActive())
                            {
                                <button @onclick="@(e => Filters.Toggle(filter))" type="button" class="btn btn-warning filter-btn">@filter <i class="fa-solid fa-xmark"></i></button>
                            }
                            <hr />
                        }
                   
                        @foreach(string category in Filters.GetAll().Select(f => f.Category).Distinct().ToList())
                        {
                            <div>
                                <small>@category</small>
                                <br>
                                @foreach(Filter filter in Filters.GetAll().Where(f => f.Category == category))
                                {
                                    if (!Filters.GetActive().Contains(filter.Name))
                                    {
                                        <button @onclick="@(e => Filters.Toggle(filter.Name))" type="button" class="btn btn-warning filter-btn">@filter.Name <i class="fa-solid fa-plus"></i></button>
                                    }
                                }
                            </div>  
                        }
                    </div>
                </div>
            </div>
            @*This is just a placeholder so the bottom of the accordion is complete*@
            <div class="card"></div>
        </div>
    </div>

    <div style="margin-top: 115px">
        @if (ShowVendors)
        {
            <VendorList Vendors="@SearchVendors()"/>
        } else
        {
            <ProductList Products="@SearchProducts()"/>   
        }
    </div>

</div>

@code {

    private string QueryString { get; set; }
    private SortPredicate SortBy { get; set; }

    private bool filtersOpen = false;

    private void ToggleFiltersTray() => filtersOpen = !filtersOpen;
    private string RotateIconClass => filtersOpen ? "fa-rotate-180" : null;

    private string ProductsActive => ShowVendors ? null : "active";
    private string VendorsActive => ShowVendors ? "active" : null;

    private string ActiveSortClass(SortPredicate predicate) => predicate == SortBy ? "active" : null;

    private bool ShowVendors = false;
    private string ShowingIcon => ShowVendors ? "fa-map-location-dot" : "fa-bag-shopping";

    /// <returns>Return products that match the users search: filters, query string, and sort</returns>
    private List<Product> SearchProducts()
    {

        Console.WriteLine(Navigator);
        //if (!Products.GetAll().Any()) return new List<Product>();

        List<Product> filteredProducts = Products.GetAll();

        // filter by search string
        if (!string.IsNullOrEmpty(QueryString))
        {
            filteredProducts = filteredProducts.FindAll(p => p.Name.ToLower().Contains(QueryString.ToLower()) || p.Description.ToLower().Contains(QueryString.ToLower()));
        }

        // filter by active filter selection
        List<Filter> active = Filters.GetAll().FindAll(f => Filters.GetActive().Contains(f.Name) && !string.IsNullOrEmpty(f.DataField));    // Get the active filters that have a DataField
        filteredProducts = filteredProducts.FindAll(p => active.Aggregate(true, (acc, val) => acc && p.GetType().GetProperty(val.DataField).GetValue(p, null).Equals(1)));      // filter to products that satisfy all actiuve filters

        // Sort the Products
        filteredProducts.Sort((p1, p2) =>
        {
            if (SortBy.Equals(SortPredicate.Closest)) {     // Sort by booth asc
            return Vendors.GetAll().Find(v => v.Name == p1.Vendor).Booth.CompareTo(Vendors.GetAll().Find(v => v.Name == p2.Vendor).Booth);    
            }
            else if (SortBy.Equals(SortPredicate.Cheapest)) {   // Sort by price asc  
            return p1.Price.CompareTo(p2.Price);               
            }
            else return 0;      // default (newest - we dont really have a way of finding this) 
    });

        return filteredProducts;
    }

    /// <returns>Return vendors that match the users search: filters, query string, and sort</returns>
    private List<Vendor> SearchVendors()
    {
        if (!Vendors.GetAll().Any()) return new List<Vendor>();

        List<Vendor> filteredVendors = Vendors.GetAll();

        if (!string.IsNullOrEmpty(QueryString))
        {
            filteredVendors = filteredVendors.FindAll(p => p.Name.ToLower().Contains(QueryString.ToLower()) || p.Description.ToLower().Contains(QueryString.ToLower()));
        }

        // filter by active filter selection
        List<Filter> active = Filters.GetAll().FindAll(f => Filters.GetActive().Contains(f.Name) && !string.IsNullOrEmpty(f.DataField));    // Get the active filters that have a DataField
        filteredVendors = filteredVendors.FindAll(v =>
        {
            List<Product> vendorProducts = Products.GetAll().FindAll(p => p.Vendor == v.Name);
            // Look through the vendor's products, if at least one satifies the active filters we return true
            return vendorProducts.Aggregate(false, (accOuter, p) => accOuter || active.Aggregate(true, (accInner, f) => accInner && p.GetType().GetProperty(f.DataField).GetValue(p, null).Equals(1)));

        });

        // Sort the vendors
        filteredVendors.Sort((v1, v2) =>
        {
            if (SortBy.Equals(SortPredicate.Closest)) return v1.Booth.CompareTo(v2.Booth);    // Sort by booth asc
            else if (SortBy.Equals(SortPredicate.Cheapest))                                   // Sort by ave price asc
            {   // Return vendor with cheapest average price accross their products
                List<Product> v1Products = Products.GetAll().Where(p => p.Vendor == v1.Name).ToList();
                var v1PriceAve = v1Products.Aggregate(0, (acc, p) => acc + p.Price) / v1Products.Count();

                List<Product> v2Products = Products.GetAll().Where(p => p.Vendor == v2.Name).ToList();
                var v2PriceAve = v2Products.Aggregate(0, (acc, p) => acc + p.Price) / v2Products.Count();

                return v1PriceAve.CompareTo(v2PriceAve);
            }
            else return 0;      // default - newest
        });

        return filteredVendors;
    } 
}
